//! Generated by easymock

#ifndef EASYMOCK_EM_HEADER_1_H
#define EASYMOCK_EM_HEADER_1_H

#include <easymock.h>
#include "em_header_1.h"

//!
//! Mock for em_void_func_void
//!

easymock_func* easymock_meta_of_em_void_func_void(void);

typedef void (*easymock_fn_callback_em_void_func_void)(
    void*);

typedef int (*easymock_fn_check_em_void_func_void)(
    void*);

void easymock_expect_and_return_em_void_func_void(
    void);

void easymock_expect_and_callback_em_void_func_void(
    easymock_fn_callback_em_void_func_void _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
void em_void_func_void(
    void);
*/

//!
//! Mock for em_void_func_int
//!

easymock_func* easymock_meta_of_em_void_func_int(void);

typedef struct easymock_params_of_em_void_func_int_tag {
    int a;
} easymock_params_of_em_void_func_int;

typedef void (*easymock_fn_callback_em_void_func_int)(
    const easymock_params_of_em_void_func_int*,
    void*);

typedef int (*easymock_fn_check_em_void_func_int)(
    const easymock_params_of_em_void_func_int*,
    void*);

void easymock_ignore_and_return_em_void_func_int(
    void);

void easymock_ignore_and_callback_em_void_func_int(
    easymock_fn_callback_em_void_func_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_void_func_int(
    int a);

void easymock_match_and_callback_em_void_func_int(
    int a,
    easymock_fn_callback_em_void_func_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_void_func_int(
    easymock_fn_check_em_void_func_int _em_fn_check,
    void* _em_arg_ch);

void easymock_check_and_callback_em_void_func_int(
    easymock_fn_check_em_void_func_int _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_void_func_int _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
void em_void_func_int(
    int a);
*/

//!
//! Mock for em_void_func_int_int
//!

easymock_func* easymock_meta_of_em_void_func_int_int(void);

typedef struct easymock_params_of_em_void_func_int_int_tag {
    int a;
    int b;
} easymock_params_of_em_void_func_int_int;

typedef void (*easymock_fn_callback_em_void_func_int_int)(
    const easymock_params_of_em_void_func_int_int*,
    void*);

typedef int (*easymock_fn_check_em_void_func_int_int)(
    const easymock_params_of_em_void_func_int_int*,
    void*);

void easymock_ignore_and_return_em_void_func_int_int(
    void);

void easymock_ignore_and_callback_em_void_func_int_int(
    easymock_fn_callback_em_void_func_int_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_void_func_int_int(
    int a,
    int b);

void easymock_match_and_callback_em_void_func_int_int(
    int a,
    int b,
    easymock_fn_callback_em_void_func_int_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_void_func_int_int(
    easymock_fn_check_em_void_func_int_int _em_fn_check,
    void* _em_arg_ch);

void easymock_check_and_callback_em_void_func_int_int(
    easymock_fn_check_em_void_func_int_int _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_void_func_int_int _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
void em_void_func_int_int(
    int a,
    int b);
*/

//!
//! Mock for em_void_func_voidptr
//!

easymock_func* easymock_meta_of_em_void_func_voidptr(void);

typedef struct easymock_params_of_em_void_func_voidptr_tag {
    void* p;
} easymock_params_of_em_void_func_voidptr;

typedef void (*easymock_fn_callback_em_void_func_voidptr)(
    const easymock_params_of_em_void_func_voidptr*,
    void*);

typedef int (*easymock_fn_check_em_void_func_voidptr)(
    const easymock_params_of_em_void_func_voidptr*,
    void*);

void easymock_ignore_and_return_em_void_func_voidptr(
    void);

void easymock_ignore_and_callback_em_void_func_voidptr(
    easymock_fn_callback_em_void_func_voidptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_void_func_voidptr(
    void* p);

void easymock_match_and_callback_em_void_func_voidptr(
    void* p,
    easymock_fn_callback_em_void_func_voidptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_void_func_voidptr(
    easymock_fn_check_em_void_func_voidptr _em_fn_check,
    void* _em_arg_ch);

void easymock_check_and_callback_em_void_func_voidptr(
    easymock_fn_check_em_void_func_voidptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_void_func_voidptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
void em_void_func_voidptr(
    void* p);
*/

//!
//! Mock for em_int_func_int
//!

easymock_func* easymock_meta_of_em_int_func_int(void);

typedef struct easymock_params_of_em_int_func_int_tag {
    int a;
} easymock_params_of_em_int_func_int;

typedef int easymock_return_type_of_em_int_func_int;

typedef struct easymock_result_of_em_int_func_int_tag {
    easymock_return_type_of_em_int_func_int return_value;
} easymock_result_of_em_int_func_int;

typedef int (*easymock_fn_callback_em_int_func_int)(
    const easymock_params_of_em_int_func_int*,
    void*);

typedef int (*easymock_fn_check_em_int_func_int)(
    const easymock_params_of_em_int_func_int*,
    void*);

void easymock_ignore_and_return_em_int_func_int(
    easymock_return_type_of_em_int_func_int _em_return_value);

void easymock_ignore_and_callback_em_int_func_int(
    easymock_fn_callback_em_int_func_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_int_func_int(
    int a,
    easymock_return_type_of_em_int_func_int _em_return_value);

void easymock_match_and_callback_em_int_func_int(
    int a,
    easymock_fn_callback_em_int_func_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_int_func_int(
    easymock_fn_check_em_int_func_int _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_int_func_int _em_return_value);

void easymock_check_and_callback_em_int_func_int(
    easymock_fn_check_em_int_func_int _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_int_func_int _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_int_func_int(
    int a);
*/

//!
//! Mock for em_int_func_int_int
//!

easymock_func* easymock_meta_of_em_int_func_int_int(void);

typedef struct easymock_params_of_em_int_func_int_int_tag {
    int a;
    int b;
} easymock_params_of_em_int_func_int_int;

typedef int easymock_return_type_of_em_int_func_int_int;

typedef struct easymock_result_of_em_int_func_int_int_tag {
    easymock_return_type_of_em_int_func_int_int return_value;
} easymock_result_of_em_int_func_int_int;

typedef int (*easymock_fn_callback_em_int_func_int_int)(
    const easymock_params_of_em_int_func_int_int*,
    void*);

typedef int (*easymock_fn_check_em_int_func_int_int)(
    const easymock_params_of_em_int_func_int_int*,
    void*);

void easymock_ignore_and_return_em_int_func_int_int(
    easymock_return_type_of_em_int_func_int_int _em_return_value);

void easymock_ignore_and_callback_em_int_func_int_int(
    easymock_fn_callback_em_int_func_int_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_int_func_int_int(
    int a,
    int b,
    easymock_return_type_of_em_int_func_int_int _em_return_value);

void easymock_match_and_callback_em_int_func_int_int(
    int a,
    int b,
    easymock_fn_callback_em_int_func_int_int _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_int_func_int_int(
    easymock_fn_check_em_int_func_int_int _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_int_func_int_int _em_return_value);

void easymock_check_and_callback_em_int_func_int_int(
    easymock_fn_check_em_int_func_int_int _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_int_func_int_int _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_int_func_int_int(
    int a,
    int b);
*/

//!
//! Mock for em_int_func_voidptr
//!

easymock_func* easymock_meta_of_em_int_func_voidptr(void);

typedef struct easymock_params_of_em_int_func_voidptr_tag {
    void* p;
} easymock_params_of_em_int_func_voidptr;

typedef int easymock_return_type_of_em_int_func_voidptr;

typedef struct easymock_result_of_em_int_func_voidptr_tag {
    easymock_return_type_of_em_int_func_voidptr return_value;
} easymock_result_of_em_int_func_voidptr;

typedef int (*easymock_fn_callback_em_int_func_voidptr)(
    const easymock_params_of_em_int_func_voidptr*,
    void*);

typedef int (*easymock_fn_check_em_int_func_voidptr)(
    const easymock_params_of_em_int_func_voidptr*,
    void*);

void easymock_ignore_and_return_em_int_func_voidptr(
    easymock_return_type_of_em_int_func_voidptr _em_return_value);

void easymock_ignore_and_callback_em_int_func_voidptr(
    easymock_fn_callback_em_int_func_voidptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_int_func_voidptr(
    void* p,
    easymock_return_type_of_em_int_func_voidptr _em_return_value);

void easymock_match_and_callback_em_int_func_voidptr(
    void* p,
    easymock_fn_callback_em_int_func_voidptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_int_func_voidptr(
    easymock_fn_check_em_int_func_voidptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_int_func_voidptr _em_return_value);

void easymock_check_and_callback_em_int_func_voidptr(
    easymock_fn_check_em_int_func_voidptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_int_func_voidptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_int_func_voidptr(
    void* p);
*/

//!
//! Mock for em_func_funcptr1
//!

easymock_func* easymock_meta_of_em_func_funcptr1(void);

typedef struct easymock_params_of_em_func_funcptr1_tag {
    fn_ptr1 fcb1;
    fn_ptr2 fcb2;
} easymock_params_of_em_func_funcptr1;

typedef int easymock_return_type_of_em_func_funcptr1;

typedef struct easymock_result_of_em_func_funcptr1_tag {
    easymock_return_type_of_em_func_funcptr1 return_value;
} easymock_result_of_em_func_funcptr1;

typedef int (*easymock_fn_callback_em_func_funcptr1)(
    const easymock_params_of_em_func_funcptr1*,
    void*);

typedef int (*easymock_fn_check_em_func_funcptr1)(
    const easymock_params_of_em_func_funcptr1*,
    void*);

void easymock_ignore_and_return_em_func_funcptr1(
    easymock_return_type_of_em_func_funcptr1 _em_return_value);

void easymock_ignore_and_callback_em_func_funcptr1(
    easymock_fn_callback_em_func_funcptr1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_funcptr1(
    fn_ptr1 fcb1,
    fn_ptr2 fcb2,
    easymock_return_type_of_em_func_funcptr1 _em_return_value);

void easymock_match_and_callback_em_func_funcptr1(
    fn_ptr1 fcb1,
    fn_ptr2 fcb2,
    easymock_fn_callback_em_func_funcptr1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_funcptr1(
    easymock_fn_check_em_func_funcptr1 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_funcptr1 _em_return_value);

void easymock_check_and_callback_em_func_funcptr1(
    easymock_fn_check_em_func_funcptr1 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_funcptr1 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_funcptr1(
    fn_ptr1 fcb1,
    fn_ptr2 fcb2);
*/

//!
//! Mock for em_func_funcptr2
//!

easymock_func* easymock_meta_of_em_func_funcptr2(void);

typedef struct easymock_params_of_em_func_funcptr2_tag {
    fn_ptr1 fcb;
} easymock_params_of_em_func_funcptr2;

typedef int easymock_return_type_of_em_func_funcptr2;

typedef struct easymock_result_of_em_func_funcptr2_tag {
    easymock_return_type_of_em_func_funcptr2 return_value;
} easymock_result_of_em_func_funcptr2;

typedef int (*easymock_fn_callback_em_func_funcptr2)(
    const easymock_params_of_em_func_funcptr2*,
    void*);

typedef int (*easymock_fn_check_em_func_funcptr2)(
    const easymock_params_of_em_func_funcptr2*,
    void*);

void easymock_ignore_and_return_em_func_funcptr2(
    easymock_return_type_of_em_func_funcptr2 _em_return_value);

void easymock_ignore_and_callback_em_func_funcptr2(
    easymock_fn_callback_em_func_funcptr2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_funcptr2(
    fn_ptr1 fcb,
    easymock_return_type_of_em_func_funcptr2 _em_return_value);

void easymock_match_and_callback_em_func_funcptr2(
    fn_ptr1 fcb,
    easymock_fn_callback_em_func_funcptr2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_funcptr2(
    easymock_fn_check_em_func_funcptr2 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_funcptr2 _em_return_value);

void easymock_check_and_callback_em_func_funcptr2(
    easymock_fn_check_em_func_funcptr2 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_funcptr2 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_funcptr2(
    fn_ptr1 fcb);
*/

//!
//! Mock for em_func_funcptr3
//!

easymock_func* easymock_meta_of_em_func_funcptr3(void);

typedef struct easymock_params_of_em_func_funcptr3_tag {
    void* (* fcb)(int, void* );
} easymock_params_of_em_func_funcptr3;

typedef int easymock_return_type_of_em_func_funcptr3;

typedef struct easymock_result_of_em_func_funcptr3_tag {
    easymock_return_type_of_em_func_funcptr3 return_value;
} easymock_result_of_em_func_funcptr3;

typedef int (*easymock_fn_callback_em_func_funcptr3)(
    const easymock_params_of_em_func_funcptr3*,
    void*);

typedef int (*easymock_fn_check_em_func_funcptr3)(
    const easymock_params_of_em_func_funcptr3*,
    void*);

void easymock_ignore_and_return_em_func_funcptr3(
    easymock_return_type_of_em_func_funcptr3 _em_return_value);

void easymock_ignore_and_callback_em_func_funcptr3(
    easymock_fn_callback_em_func_funcptr3 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_funcptr3(
    void* (* fcb)(int, void* ),
    easymock_return_type_of_em_func_funcptr3 _em_return_value);

void easymock_match_and_callback_em_func_funcptr3(
    void* (* fcb)(int, void* ),
    easymock_fn_callback_em_func_funcptr3 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_funcptr3(
    easymock_fn_check_em_func_funcptr3 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_funcptr3 _em_return_value);

void easymock_check_and_callback_em_func_funcptr3(
    easymock_fn_check_em_func_funcptr3 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_funcptr3 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_funcptr3(
    void* (
    * fcb)(
    int,
    void* ));
*/

//!
//! Mock for em_func_union_1
//!

easymock_func* easymock_meta_of_em_func_union_1(void);

typedef struct easymock_params_of_em_func_union_1_tag {
    union Union1 u;
} easymock_params_of_em_func_union_1;

typedef int easymock_return_type_of_em_func_union_1;

typedef struct easymock_result_of_em_func_union_1_tag {
    easymock_return_type_of_em_func_union_1 return_value;
} easymock_result_of_em_func_union_1;

typedef int (*easymock_fn_callback_em_func_union_1)(
    const easymock_params_of_em_func_union_1*,
    void*);

typedef int (*easymock_fn_check_em_func_union_1)(
    const easymock_params_of_em_func_union_1*,
    void*);

void easymock_ignore_and_return_em_func_union_1(
    easymock_return_type_of_em_func_union_1 _em_return_value);

void easymock_ignore_and_callback_em_func_union_1(
    easymock_fn_callback_em_func_union_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_union_1(
    union Union1 u,
    easymock_return_type_of_em_func_union_1 _em_return_value);

void easymock_match_and_callback_em_func_union_1(
    union Union1 u,
    easymock_fn_callback_em_func_union_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_union_1(
    easymock_fn_check_em_func_union_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_union_1 _em_return_value);

void easymock_check_and_callback_em_func_union_1(
    easymock_fn_check_em_func_union_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_union_1 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_union_1(
    union Union1 u);
*/

//!
//! Mock for em_func_union_1_ptr
//!

easymock_func* easymock_meta_of_em_func_union_1_ptr(void);

typedef struct easymock_params_of_em_func_union_1_ptr_tag {
    union Union1* u;
} easymock_params_of_em_func_union_1_ptr;

typedef int easymock_return_type_of_em_func_union_1_ptr;

typedef struct easymock_result_of_em_func_union_1_ptr_tag {
    easymock_return_type_of_em_func_union_1_ptr return_value;
} easymock_result_of_em_func_union_1_ptr;

typedef int (*easymock_fn_callback_em_func_union_1_ptr)(
    const easymock_params_of_em_func_union_1_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_union_1_ptr)(
    const easymock_params_of_em_func_union_1_ptr*,
    void*);

void easymock_ignore_and_return_em_func_union_1_ptr(
    easymock_return_type_of_em_func_union_1_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_union_1_ptr(
    easymock_fn_callback_em_func_union_1_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_union_1_ptr(
    union Union1* u,
    easymock_return_type_of_em_func_union_1_ptr _em_return_value);

void easymock_match_and_callback_em_func_union_1_ptr(
    union Union1* u,
    easymock_fn_callback_em_func_union_1_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_union_1_ptr(
    easymock_fn_check_em_func_union_1_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_union_1_ptr _em_return_value);

void easymock_check_and_callback_em_func_union_1_ptr(
    easymock_fn_check_em_func_union_1_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_union_1_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_union_1_ptr(
    union Union1* u);
*/

//!
//! Mock for em_func_union_2
//!

easymock_func* easymock_meta_of_em_func_union_2(void);

typedef struct easymock_params_of_em_func_union_2_tag {
    Union2T u;
} easymock_params_of_em_func_union_2;

typedef int easymock_return_type_of_em_func_union_2;

typedef struct easymock_result_of_em_func_union_2_tag {
    easymock_return_type_of_em_func_union_2 return_value;
} easymock_result_of_em_func_union_2;

typedef int (*easymock_fn_callback_em_func_union_2)(
    const easymock_params_of_em_func_union_2*,
    void*);

typedef int (*easymock_fn_check_em_func_union_2)(
    const easymock_params_of_em_func_union_2*,
    void*);

void easymock_ignore_and_return_em_func_union_2(
    easymock_return_type_of_em_func_union_2 _em_return_value);

void easymock_ignore_and_callback_em_func_union_2(
    easymock_fn_callback_em_func_union_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_union_2(
    Union2T u,
    easymock_return_type_of_em_func_union_2 _em_return_value);

void easymock_match_and_callback_em_func_union_2(
    Union2T u,
    easymock_fn_callback_em_func_union_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_union_2(
    easymock_fn_check_em_func_union_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_union_2 _em_return_value);

void easymock_check_and_callback_em_func_union_2(
    easymock_fn_check_em_func_union_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_union_2 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_union_2(
    Union2T u);
*/

//!
//! Mock for em_func_union_2_ptr
//!

easymock_func* easymock_meta_of_em_func_union_2_ptr(void);

typedef struct easymock_params_of_em_func_union_2_ptr_tag {
    Union2T* u;
} easymock_params_of_em_func_union_2_ptr;

typedef int easymock_return_type_of_em_func_union_2_ptr;

typedef struct easymock_result_of_em_func_union_2_ptr_tag {
    easymock_return_type_of_em_func_union_2_ptr return_value;
} easymock_result_of_em_func_union_2_ptr;

typedef int (*easymock_fn_callback_em_func_union_2_ptr)(
    const easymock_params_of_em_func_union_2_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_union_2_ptr)(
    const easymock_params_of_em_func_union_2_ptr*,
    void*);

void easymock_ignore_and_return_em_func_union_2_ptr(
    easymock_return_type_of_em_func_union_2_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_union_2_ptr(
    easymock_fn_callback_em_func_union_2_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_union_2_ptr(
    Union2T* u,
    easymock_return_type_of_em_func_union_2_ptr _em_return_value);

void easymock_match_and_callback_em_func_union_2_ptr(
    Union2T* u,
    easymock_fn_callback_em_func_union_2_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_union_2_ptr(
    easymock_fn_check_em_func_union_2_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_union_2_ptr _em_return_value);

void easymock_check_and_callback_em_func_union_2_ptr(
    easymock_fn_check_em_func_union_2_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_union_2_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_union_2_ptr(
    Union2T* u);
*/

//!
//! Mock for em_func_enum_1
//!

easymock_func* easymock_meta_of_em_func_enum_1(void);

typedef struct easymock_params_of_em_func_enum_1_tag {
    enum Enum1 e;
} easymock_params_of_em_func_enum_1;

typedef int easymock_return_type_of_em_func_enum_1;

typedef struct easymock_result_of_em_func_enum_1_tag {
    easymock_return_type_of_em_func_enum_1 return_value;
} easymock_result_of_em_func_enum_1;

typedef int (*easymock_fn_callback_em_func_enum_1)(
    const easymock_params_of_em_func_enum_1*,
    void*);

typedef int (*easymock_fn_check_em_func_enum_1)(
    const easymock_params_of_em_func_enum_1*,
    void*);

void easymock_ignore_and_return_em_func_enum_1(
    easymock_return_type_of_em_func_enum_1 _em_return_value);

void easymock_ignore_and_callback_em_func_enum_1(
    easymock_fn_callback_em_func_enum_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_enum_1(
    enum Enum1 e,
    easymock_return_type_of_em_func_enum_1 _em_return_value);

void easymock_match_and_callback_em_func_enum_1(
    enum Enum1 e,
    easymock_fn_callback_em_func_enum_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_enum_1(
    easymock_fn_check_em_func_enum_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_enum_1 _em_return_value);

void easymock_check_and_callback_em_func_enum_1(
    easymock_fn_check_em_func_enum_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_enum_1 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_enum_1(
    enum Enum1 e);
*/

//!
//! Mock for em_func_enum_1_ptr
//!

easymock_func* easymock_meta_of_em_func_enum_1_ptr(void);

typedef struct easymock_params_of_em_func_enum_1_ptr_tag {
    enum Enum1* e;
} easymock_params_of_em_func_enum_1_ptr;

typedef int easymock_return_type_of_em_func_enum_1_ptr;

typedef struct easymock_result_of_em_func_enum_1_ptr_tag {
    easymock_return_type_of_em_func_enum_1_ptr return_value;
} easymock_result_of_em_func_enum_1_ptr;

typedef int (*easymock_fn_callback_em_func_enum_1_ptr)(
    const easymock_params_of_em_func_enum_1_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_enum_1_ptr)(
    const easymock_params_of_em_func_enum_1_ptr*,
    void*);

void easymock_ignore_and_return_em_func_enum_1_ptr(
    easymock_return_type_of_em_func_enum_1_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_enum_1_ptr(
    easymock_fn_callback_em_func_enum_1_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_enum_1_ptr(
    enum Enum1* e,
    easymock_return_type_of_em_func_enum_1_ptr _em_return_value);

void easymock_match_and_callback_em_func_enum_1_ptr(
    enum Enum1* e,
    easymock_fn_callback_em_func_enum_1_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_enum_1_ptr(
    easymock_fn_check_em_func_enum_1_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_enum_1_ptr _em_return_value);

void easymock_check_and_callback_em_func_enum_1_ptr(
    easymock_fn_check_em_func_enum_1_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_enum_1_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_enum_1_ptr(
    enum Enum1* e);
*/

//!
//! Mock for em_func_enum_2
//!

easymock_func* easymock_meta_of_em_func_enum_2(void);

typedef struct easymock_params_of_em_func_enum_2_tag {
    Enum2T e;
} easymock_params_of_em_func_enum_2;

typedef int easymock_return_type_of_em_func_enum_2;

typedef struct easymock_result_of_em_func_enum_2_tag {
    easymock_return_type_of_em_func_enum_2 return_value;
} easymock_result_of_em_func_enum_2;

typedef int (*easymock_fn_callback_em_func_enum_2)(
    const easymock_params_of_em_func_enum_2*,
    void*);

typedef int (*easymock_fn_check_em_func_enum_2)(
    const easymock_params_of_em_func_enum_2*,
    void*);

void easymock_ignore_and_return_em_func_enum_2(
    easymock_return_type_of_em_func_enum_2 _em_return_value);

void easymock_ignore_and_callback_em_func_enum_2(
    easymock_fn_callback_em_func_enum_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_enum_2(
    Enum2T e,
    easymock_return_type_of_em_func_enum_2 _em_return_value);

void easymock_match_and_callback_em_func_enum_2(
    Enum2T e,
    easymock_fn_callback_em_func_enum_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_enum_2(
    easymock_fn_check_em_func_enum_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_enum_2 _em_return_value);

void easymock_check_and_callback_em_func_enum_2(
    easymock_fn_check_em_func_enum_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_enum_2 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_enum_2(
    Enum2T e);
*/

//!
//! Mock for em_func_enum_2_ptr
//!

easymock_func* easymock_meta_of_em_func_enum_2_ptr(void);

typedef struct easymock_params_of_em_func_enum_2_ptr_tag {
    Enum2T* e;
} easymock_params_of_em_func_enum_2_ptr;

typedef int easymock_return_type_of_em_func_enum_2_ptr;

typedef struct easymock_result_of_em_func_enum_2_ptr_tag {
    easymock_return_type_of_em_func_enum_2_ptr return_value;
} easymock_result_of_em_func_enum_2_ptr;

typedef int (*easymock_fn_callback_em_func_enum_2_ptr)(
    const easymock_params_of_em_func_enum_2_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_enum_2_ptr)(
    const easymock_params_of_em_func_enum_2_ptr*,
    void*);

void easymock_ignore_and_return_em_func_enum_2_ptr(
    easymock_return_type_of_em_func_enum_2_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_enum_2_ptr(
    easymock_fn_callback_em_func_enum_2_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_enum_2_ptr(
    Enum2T* e,
    easymock_return_type_of_em_func_enum_2_ptr _em_return_value);

void easymock_match_and_callback_em_func_enum_2_ptr(
    Enum2T* e,
    easymock_fn_callback_em_func_enum_2_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_enum_2_ptr(
    easymock_fn_check_em_func_enum_2_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_enum_2_ptr _em_return_value);

void easymock_check_and_callback_em_func_enum_2_ptr(
    easymock_fn_check_em_func_enum_2_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_enum_2_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_enum_2_ptr(
    Enum2T* e);
*/

//!
//! Mock for em_func_struct_1
//!

easymock_func* easymock_meta_of_em_func_struct_1(void);

typedef struct easymock_params_of_em_func_struct_1_tag {
    struct Struct1* ptr;
} easymock_params_of_em_func_struct_1;

typedef int easymock_return_type_of_em_func_struct_1;

typedef struct easymock_result_of_em_func_struct_1_tag {
    easymock_return_type_of_em_func_struct_1 return_value;
} easymock_result_of_em_func_struct_1;

typedef int (*easymock_fn_callback_em_func_struct_1)(
    const easymock_params_of_em_func_struct_1*,
    void*);

typedef int (*easymock_fn_check_em_func_struct_1)(
    const easymock_params_of_em_func_struct_1*,
    void*);

void easymock_ignore_and_return_em_func_struct_1(
    easymock_return_type_of_em_func_struct_1 _em_return_value);

void easymock_ignore_and_callback_em_func_struct_1(
    easymock_fn_callback_em_func_struct_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_struct_1(
    struct Struct1* ptr,
    easymock_return_type_of_em_func_struct_1 _em_return_value);

void easymock_match_and_callback_em_func_struct_1(
    struct Struct1* ptr,
    easymock_fn_callback_em_func_struct_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_struct_1(
    easymock_fn_check_em_func_struct_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_struct_1 _em_return_value);

void easymock_check_and_callback_em_func_struct_1(
    easymock_fn_check_em_func_struct_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_struct_1 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_struct_1(
    struct Struct1* ptr);
*/

//!
//! Mock for em_func_struct_2
//!

easymock_func* easymock_meta_of_em_func_struct_2(void);

typedef struct easymock_params_of_em_func_struct_2_tag {
    Struct2* ptr;
} easymock_params_of_em_func_struct_2;

typedef int easymock_return_type_of_em_func_struct_2;

typedef struct easymock_result_of_em_func_struct_2_tag {
    easymock_return_type_of_em_func_struct_2 return_value;
} easymock_result_of_em_func_struct_2;

typedef int (*easymock_fn_callback_em_func_struct_2)(
    const easymock_params_of_em_func_struct_2*,
    void*);

typedef int (*easymock_fn_check_em_func_struct_2)(
    const easymock_params_of_em_func_struct_2*,
    void*);

void easymock_ignore_and_return_em_func_struct_2(
    easymock_return_type_of_em_func_struct_2 _em_return_value);

void easymock_ignore_and_callback_em_func_struct_2(
    easymock_fn_callback_em_func_struct_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_struct_2(
    Struct2* ptr,
    easymock_return_type_of_em_func_struct_2 _em_return_value);

void easymock_match_and_callback_em_func_struct_2(
    Struct2* ptr,
    easymock_fn_callback_em_func_struct_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_struct_2(
    easymock_fn_check_em_func_struct_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_struct_2 _em_return_value);

void easymock_check_and_callback_em_func_struct_2(
    easymock_fn_check_em_func_struct_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_struct_2 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_struct_2(
    Struct2* ptr);
*/

//!
//! Mock for em_func_struct_3_ptr
//!

easymock_func* easymock_meta_of_em_func_struct_3_ptr(void);

typedef struct easymock_params_of_em_func_struct_3_ptr_tag {
    Struct3T* ptr;
} easymock_params_of_em_func_struct_3_ptr;

typedef int easymock_return_type_of_em_func_struct_3_ptr;

typedef struct easymock_result_of_em_func_struct_3_ptr_tag {
    easymock_return_type_of_em_func_struct_3_ptr return_value;
} easymock_result_of_em_func_struct_3_ptr;

typedef int (*easymock_fn_callback_em_func_struct_3_ptr)(
    const easymock_params_of_em_func_struct_3_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_struct_3_ptr)(
    const easymock_params_of_em_func_struct_3_ptr*,
    void*);

void easymock_ignore_and_return_em_func_struct_3_ptr(
    easymock_return_type_of_em_func_struct_3_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_struct_3_ptr(
    easymock_fn_callback_em_func_struct_3_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_struct_3_ptr(
    Struct3T* ptr,
    easymock_return_type_of_em_func_struct_3_ptr _em_return_value);

void easymock_match_and_callback_em_func_struct_3_ptr(
    Struct3T* ptr,
    easymock_fn_callback_em_func_struct_3_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_struct_3_ptr(
    easymock_fn_check_em_func_struct_3_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_struct_3_ptr _em_return_value);

void easymock_check_and_callback_em_func_struct_3_ptr(
    easymock_fn_check_em_func_struct_3_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_struct_3_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_struct_3_ptr(
    Struct3T* ptr);
*/

//!
//! Mock for em_func_struct_3_ptr_const
//!

easymock_func* easymock_meta_of_em_func_struct_3_ptr_const(void);

typedef struct easymock_params_of_em_func_struct_3_ptr_const_tag {
    const Struct3T* ptr;
} easymock_params_of_em_func_struct_3_ptr_const;

typedef int easymock_return_type_of_em_func_struct_3_ptr_const;

typedef struct easymock_result_of_em_func_struct_3_ptr_const_tag {
    easymock_return_type_of_em_func_struct_3_ptr_const return_value;
} easymock_result_of_em_func_struct_3_ptr_const;

typedef int (*easymock_fn_callback_em_func_struct_3_ptr_const)(
    const easymock_params_of_em_func_struct_3_ptr_const*,
    void*);

typedef int (*easymock_fn_check_em_func_struct_3_ptr_const)(
    const easymock_params_of_em_func_struct_3_ptr_const*,
    void*);

void easymock_ignore_and_return_em_func_struct_3_ptr_const(
    easymock_return_type_of_em_func_struct_3_ptr_const _em_return_value);

void easymock_ignore_and_callback_em_func_struct_3_ptr_const(
    easymock_fn_callback_em_func_struct_3_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_struct_3_ptr_const(
    const Struct3T* ptr,
    easymock_return_type_of_em_func_struct_3_ptr_const _em_return_value);

void easymock_match_and_callback_em_func_struct_3_ptr_const(
    const Struct3T* ptr,
    easymock_fn_callback_em_func_struct_3_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_struct_3_ptr_const(
    easymock_fn_check_em_func_struct_3_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_struct_3_ptr_const _em_return_value);

void easymock_check_and_callback_em_func_struct_3_ptr_const(
    easymock_fn_check_em_func_struct_3_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_struct_3_ptr_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_struct_3_ptr_const(
    const Struct3T* ptr);
*/

//!
//! Mock for em_func_struct_4_ptr
//!

easymock_func* easymock_meta_of_em_func_struct_4_ptr(void);

typedef struct easymock_params_of_em_func_struct_4_ptr_tag {
    Struct4Ptr ptr;
} easymock_params_of_em_func_struct_4_ptr;

typedef int easymock_return_type_of_em_func_struct_4_ptr;

typedef struct easymock_result_of_em_func_struct_4_ptr_tag {
    easymock_return_type_of_em_func_struct_4_ptr return_value;
} easymock_result_of_em_func_struct_4_ptr;

typedef int (*easymock_fn_callback_em_func_struct_4_ptr)(
    const easymock_params_of_em_func_struct_4_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_struct_4_ptr)(
    const easymock_params_of_em_func_struct_4_ptr*,
    void*);

void easymock_ignore_and_return_em_func_struct_4_ptr(
    easymock_return_type_of_em_func_struct_4_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_struct_4_ptr(
    easymock_fn_callback_em_func_struct_4_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_struct_4_ptr(
    Struct4Ptr ptr,
    easymock_return_type_of_em_func_struct_4_ptr _em_return_value);

void easymock_match_and_callback_em_func_struct_4_ptr(
    Struct4Ptr ptr,
    easymock_fn_callback_em_func_struct_4_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_struct_4_ptr(
    easymock_fn_check_em_func_struct_4_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_struct_4_ptr _em_return_value);

void easymock_check_and_callback_em_func_struct_4_ptr(
    easymock_fn_check_em_func_struct_4_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_struct_4_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_struct_4_ptr(
    Struct4Ptr ptr);
*/

//!
//! Mock for em_func_struct_4_ptr_const
//!

easymock_func* easymock_meta_of_em_func_struct_4_ptr_const(void);

typedef struct easymock_params_of_em_func_struct_4_ptr_const_tag {
    Struct4Ptr ptr;
} easymock_params_of_em_func_struct_4_ptr_const;

typedef int easymock_return_type_of_em_func_struct_4_ptr_const;

typedef struct easymock_result_of_em_func_struct_4_ptr_const_tag {
    easymock_return_type_of_em_func_struct_4_ptr_const return_value;
} easymock_result_of_em_func_struct_4_ptr_const;

typedef int (*easymock_fn_callback_em_func_struct_4_ptr_const)(
    const easymock_params_of_em_func_struct_4_ptr_const*,
    void*);

typedef int (*easymock_fn_check_em_func_struct_4_ptr_const)(
    const easymock_params_of_em_func_struct_4_ptr_const*,
    void*);

void easymock_ignore_and_return_em_func_struct_4_ptr_const(
    easymock_return_type_of_em_func_struct_4_ptr_const _em_return_value);

void easymock_ignore_and_callback_em_func_struct_4_ptr_const(
    easymock_fn_callback_em_func_struct_4_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_struct_4_ptr_const(
    const Struct4Ptr ptr,
    easymock_return_type_of_em_func_struct_4_ptr_const _em_return_value);

void easymock_match_and_callback_em_func_struct_4_ptr_const(
    const Struct4Ptr ptr,
    easymock_fn_callback_em_func_struct_4_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_struct_4_ptr_const(
    easymock_fn_check_em_func_struct_4_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_struct_4_ptr_const _em_return_value);

void easymock_check_and_callback_em_func_struct_4_ptr_const(
    easymock_fn_check_em_func_struct_4_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_struct_4_ptr_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_struct_4_ptr_const(
    const Struct4Ptr ptr);
*/

//!
//! Mock for em_func_opaque_1
//!

easymock_func* easymock_meta_of_em_func_opaque_1(void);

typedef struct easymock_params_of_em_func_opaque_1_tag {
    struct HiddenStruct1* ptr;
} easymock_params_of_em_func_opaque_1;

typedef int easymock_return_type_of_em_func_opaque_1;

typedef struct easymock_result_of_em_func_opaque_1_tag {
    easymock_return_type_of_em_func_opaque_1 return_value;
} easymock_result_of_em_func_opaque_1;

typedef int (*easymock_fn_callback_em_func_opaque_1)(
    const easymock_params_of_em_func_opaque_1*,
    void*);

typedef int (*easymock_fn_check_em_func_opaque_1)(
    const easymock_params_of_em_func_opaque_1*,
    void*);

void easymock_ignore_and_return_em_func_opaque_1(
    easymock_return_type_of_em_func_opaque_1 _em_return_value);

void easymock_ignore_and_callback_em_func_opaque_1(
    easymock_fn_callback_em_func_opaque_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_opaque_1(
    struct HiddenStruct1* ptr,
    easymock_return_type_of_em_func_opaque_1 _em_return_value);

void easymock_match_and_callback_em_func_opaque_1(
    struct HiddenStruct1* ptr,
    easymock_fn_callback_em_func_opaque_1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_opaque_1(
    easymock_fn_check_em_func_opaque_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_opaque_1 _em_return_value);

void easymock_check_and_callback_em_func_opaque_1(
    easymock_fn_check_em_func_opaque_1 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_opaque_1 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_opaque_1(
    struct HiddenStruct1* ptr);
*/

//!
//! Mock for em_func_opaque_2
//!

easymock_func* easymock_meta_of_em_func_opaque_2(void);

typedef struct easymock_params_of_em_func_opaque_2_tag {
    HiddenStruct2* ptr;
} easymock_params_of_em_func_opaque_2;

typedef int easymock_return_type_of_em_func_opaque_2;

typedef struct easymock_result_of_em_func_opaque_2_tag {
    easymock_return_type_of_em_func_opaque_2 return_value;
} easymock_result_of_em_func_opaque_2;

typedef int (*easymock_fn_callback_em_func_opaque_2)(
    const easymock_params_of_em_func_opaque_2*,
    void*);

typedef int (*easymock_fn_check_em_func_opaque_2)(
    const easymock_params_of_em_func_opaque_2*,
    void*);

void easymock_ignore_and_return_em_func_opaque_2(
    easymock_return_type_of_em_func_opaque_2 _em_return_value);

void easymock_ignore_and_callback_em_func_opaque_2(
    easymock_fn_callback_em_func_opaque_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_opaque_2(
    HiddenStruct2* ptr,
    easymock_return_type_of_em_func_opaque_2 _em_return_value);

void easymock_match_and_callback_em_func_opaque_2(
    HiddenStruct2* ptr,
    easymock_fn_callback_em_func_opaque_2 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_opaque_2(
    easymock_fn_check_em_func_opaque_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_opaque_2 _em_return_value);

void easymock_check_and_callback_em_func_opaque_2(
    easymock_fn_check_em_func_opaque_2 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_opaque_2 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_opaque_2(
    HiddenStruct2* ptr);
*/

//!
//! Mock for em_func_opaque_3_ptr
//!

easymock_func* easymock_meta_of_em_func_opaque_3_ptr(void);

typedef struct easymock_params_of_em_func_opaque_3_ptr_tag {
    HiddenStruct3T* ptr;
} easymock_params_of_em_func_opaque_3_ptr;

typedef int easymock_return_type_of_em_func_opaque_3_ptr;

typedef struct easymock_result_of_em_func_opaque_3_ptr_tag {
    easymock_return_type_of_em_func_opaque_3_ptr return_value;
} easymock_result_of_em_func_opaque_3_ptr;

typedef int (*easymock_fn_callback_em_func_opaque_3_ptr)(
    const easymock_params_of_em_func_opaque_3_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_opaque_3_ptr)(
    const easymock_params_of_em_func_opaque_3_ptr*,
    void*);

void easymock_ignore_and_return_em_func_opaque_3_ptr(
    easymock_return_type_of_em_func_opaque_3_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_opaque_3_ptr(
    easymock_fn_callback_em_func_opaque_3_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_opaque_3_ptr(
    HiddenStruct3T* ptr,
    easymock_return_type_of_em_func_opaque_3_ptr _em_return_value);

void easymock_match_and_callback_em_func_opaque_3_ptr(
    HiddenStruct3T* ptr,
    easymock_fn_callback_em_func_opaque_3_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_opaque_3_ptr(
    easymock_fn_check_em_func_opaque_3_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_opaque_3_ptr _em_return_value);

void easymock_check_and_callback_em_func_opaque_3_ptr(
    easymock_fn_check_em_func_opaque_3_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_opaque_3_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_opaque_3_ptr(
    HiddenStruct3T* ptr);
*/

//!
//! Mock for em_func_opaque_3_ptr_const
//!

easymock_func* easymock_meta_of_em_func_opaque_3_ptr_const(void);

typedef struct easymock_params_of_em_func_opaque_3_ptr_const_tag {
    const HiddenStruct3T* ptr;
} easymock_params_of_em_func_opaque_3_ptr_const;

typedef int easymock_return_type_of_em_func_opaque_3_ptr_const;

typedef struct easymock_result_of_em_func_opaque_3_ptr_const_tag {
    easymock_return_type_of_em_func_opaque_3_ptr_const return_value;
} easymock_result_of_em_func_opaque_3_ptr_const;

typedef int (*easymock_fn_callback_em_func_opaque_3_ptr_const)(
    const easymock_params_of_em_func_opaque_3_ptr_const*,
    void*);

typedef int (*easymock_fn_check_em_func_opaque_3_ptr_const)(
    const easymock_params_of_em_func_opaque_3_ptr_const*,
    void*);

void easymock_ignore_and_return_em_func_opaque_3_ptr_const(
    easymock_return_type_of_em_func_opaque_3_ptr_const _em_return_value);

void easymock_ignore_and_callback_em_func_opaque_3_ptr_const(
    easymock_fn_callback_em_func_opaque_3_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_opaque_3_ptr_const(
    const HiddenStruct3T* ptr,
    easymock_return_type_of_em_func_opaque_3_ptr_const _em_return_value);

void easymock_match_and_callback_em_func_opaque_3_ptr_const(
    const HiddenStruct3T* ptr,
    easymock_fn_callback_em_func_opaque_3_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_opaque_3_ptr_const(
    easymock_fn_check_em_func_opaque_3_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_opaque_3_ptr_const _em_return_value);

void easymock_check_and_callback_em_func_opaque_3_ptr_const(
    easymock_fn_check_em_func_opaque_3_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_opaque_3_ptr_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_opaque_3_ptr_const(
    const HiddenStruct3T* ptr);
*/

//!
//! Mock for em_func_opaque_4_ptr
//!

easymock_func* easymock_meta_of_em_func_opaque_4_ptr(void);

typedef struct easymock_params_of_em_func_opaque_4_ptr_tag {
    HiddenStruct4Ptr ptr;
} easymock_params_of_em_func_opaque_4_ptr;

typedef int easymock_return_type_of_em_func_opaque_4_ptr;

typedef struct easymock_result_of_em_func_opaque_4_ptr_tag {
    easymock_return_type_of_em_func_opaque_4_ptr return_value;
} easymock_result_of_em_func_opaque_4_ptr;

typedef int (*easymock_fn_callback_em_func_opaque_4_ptr)(
    const easymock_params_of_em_func_opaque_4_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_opaque_4_ptr)(
    const easymock_params_of_em_func_opaque_4_ptr*,
    void*);

void easymock_ignore_and_return_em_func_opaque_4_ptr(
    easymock_return_type_of_em_func_opaque_4_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_opaque_4_ptr(
    easymock_fn_callback_em_func_opaque_4_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_opaque_4_ptr(
    HiddenStruct4Ptr ptr,
    easymock_return_type_of_em_func_opaque_4_ptr _em_return_value);

void easymock_match_and_callback_em_func_opaque_4_ptr(
    HiddenStruct4Ptr ptr,
    easymock_fn_callback_em_func_opaque_4_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_opaque_4_ptr(
    easymock_fn_check_em_func_opaque_4_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_opaque_4_ptr _em_return_value);

void easymock_check_and_callback_em_func_opaque_4_ptr(
    easymock_fn_check_em_func_opaque_4_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_opaque_4_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_opaque_4_ptr(
    HiddenStruct4Ptr ptr);
*/

//!
//! Mock for em_func_opaque_4_ptr_const
//!

easymock_func* easymock_meta_of_em_func_opaque_4_ptr_const(void);

typedef struct easymock_params_of_em_func_opaque_4_ptr_const_tag {
    HiddenStruct4Ptr ptr;
} easymock_params_of_em_func_opaque_4_ptr_const;

typedef int easymock_return_type_of_em_func_opaque_4_ptr_const;

typedef struct easymock_result_of_em_func_opaque_4_ptr_const_tag {
    easymock_return_type_of_em_func_opaque_4_ptr_const return_value;
} easymock_result_of_em_func_opaque_4_ptr_const;

typedef int (*easymock_fn_callback_em_func_opaque_4_ptr_const)(
    const easymock_params_of_em_func_opaque_4_ptr_const*,
    void*);

typedef int (*easymock_fn_check_em_func_opaque_4_ptr_const)(
    const easymock_params_of_em_func_opaque_4_ptr_const*,
    void*);

void easymock_ignore_and_return_em_func_opaque_4_ptr_const(
    easymock_return_type_of_em_func_opaque_4_ptr_const _em_return_value);

void easymock_ignore_and_callback_em_func_opaque_4_ptr_const(
    easymock_fn_callback_em_func_opaque_4_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_opaque_4_ptr_const(
    const HiddenStruct4Ptr ptr,
    easymock_return_type_of_em_func_opaque_4_ptr_const _em_return_value);

void easymock_match_and_callback_em_func_opaque_4_ptr_const(
    const HiddenStruct4Ptr ptr,
    easymock_fn_callback_em_func_opaque_4_ptr_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_opaque_4_ptr_const(
    easymock_fn_check_em_func_opaque_4_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_opaque_4_ptr_const _em_return_value);

void easymock_check_and_callback_em_func_opaque_4_ptr_const(
    easymock_fn_check_em_func_opaque_4_ptr_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_opaque_4_ptr_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_opaque_4_ptr_const(
    const HiddenStruct4Ptr ptr);
*/

//!
//! Mock for em_func_uint8
//!

easymock_func* easymock_meta_of_em_func_uint8(void);

typedef struct easymock_params_of_em_func_uint8_tag {
    em_uint8_t n;
} easymock_params_of_em_func_uint8;

typedef int easymock_return_type_of_em_func_uint8;

typedef struct easymock_result_of_em_func_uint8_tag {
    easymock_return_type_of_em_func_uint8 return_value;
} easymock_result_of_em_func_uint8;

typedef int (*easymock_fn_callback_em_func_uint8)(
    const easymock_params_of_em_func_uint8*,
    void*);

typedef int (*easymock_fn_check_em_func_uint8)(
    const easymock_params_of_em_func_uint8*,
    void*);

void easymock_ignore_and_return_em_func_uint8(
    easymock_return_type_of_em_func_uint8 _em_return_value);

void easymock_ignore_and_callback_em_func_uint8(
    easymock_fn_callback_em_func_uint8 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_uint8(
    em_uint8_t n,
    easymock_return_type_of_em_func_uint8 _em_return_value);

void easymock_match_and_callback_em_func_uint8(
    em_uint8_t n,
    easymock_fn_callback_em_func_uint8 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_uint8(
    easymock_fn_check_em_func_uint8 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_uint8 _em_return_value);

void easymock_check_and_callback_em_func_uint8(
    easymock_fn_check_em_func_uint8 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_uint8 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_uint8(
    em_uint8_t n);
*/

//!
//! Mock for em_func_uint8_const
//!

easymock_func* easymock_meta_of_em_func_uint8_const(void);

typedef struct easymock_params_of_em_func_uint8_const_tag {
    em_uint8_t n;
} easymock_params_of_em_func_uint8_const;

typedef int easymock_return_type_of_em_func_uint8_const;

typedef struct easymock_result_of_em_func_uint8_const_tag {
    easymock_return_type_of_em_func_uint8_const return_value;
} easymock_result_of_em_func_uint8_const;

typedef int (*easymock_fn_callback_em_func_uint8_const)(
    const easymock_params_of_em_func_uint8_const*,
    void*);

typedef int (*easymock_fn_check_em_func_uint8_const)(
    const easymock_params_of_em_func_uint8_const*,
    void*);

void easymock_ignore_and_return_em_func_uint8_const(
    easymock_return_type_of_em_func_uint8_const _em_return_value);

void easymock_ignore_and_callback_em_func_uint8_const(
    easymock_fn_callback_em_func_uint8_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_uint8_const(
    const em_uint8_t n,
    easymock_return_type_of_em_func_uint8_const _em_return_value);

void easymock_match_and_callback_em_func_uint8_const(
    const em_uint8_t n,
    easymock_fn_callback_em_func_uint8_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_uint8_const(
    easymock_fn_check_em_func_uint8_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_uint8_const _em_return_value);

void easymock_check_and_callback_em_func_uint8_const(
    easymock_fn_check_em_func_uint8_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_uint8_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_uint8_const(
    const em_uint8_t n);
*/

//!
//! Mock for em_func_uint8_ptr
//!

easymock_func* easymock_meta_of_em_func_uint8_ptr(void);

typedef struct easymock_params_of_em_func_uint8_ptr_tag {
    em_uint8_t* n;
} easymock_params_of_em_func_uint8_ptr;

typedef int easymock_return_type_of_em_func_uint8_ptr;

typedef struct easymock_result_of_em_func_uint8_ptr_tag {
    easymock_return_type_of_em_func_uint8_ptr return_value;
} easymock_result_of_em_func_uint8_ptr;

typedef int (*easymock_fn_callback_em_func_uint8_ptr)(
    const easymock_params_of_em_func_uint8_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_uint8_ptr)(
    const easymock_params_of_em_func_uint8_ptr*,
    void*);

void easymock_ignore_and_return_em_func_uint8_ptr(
    easymock_return_type_of_em_func_uint8_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_uint8_ptr(
    easymock_fn_callback_em_func_uint8_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_uint8_ptr(
    em_uint8_t* n,
    easymock_return_type_of_em_func_uint8_ptr _em_return_value);

void easymock_match_and_callback_em_func_uint8_ptr(
    em_uint8_t* n,
    easymock_fn_callback_em_func_uint8_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_uint8_ptr(
    easymock_fn_check_em_func_uint8_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_uint8_ptr _em_return_value);

void easymock_check_and_callback_em_func_uint8_ptr(
    easymock_fn_check_em_func_uint8_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_uint8_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_uint8_ptr(
    em_uint8_t* n);
*/

//!
//! Mock for em_func_bool
//!

easymock_func* easymock_meta_of_em_func_bool(void);

typedef struct easymock_params_of_em_func_bool_tag {
    em_bool_t flag;
} easymock_params_of_em_func_bool;

typedef int easymock_return_type_of_em_func_bool;

typedef struct easymock_result_of_em_func_bool_tag {
    easymock_return_type_of_em_func_bool return_value;
} easymock_result_of_em_func_bool;

typedef int (*easymock_fn_callback_em_func_bool)(
    const easymock_params_of_em_func_bool*,
    void*);

typedef int (*easymock_fn_check_em_func_bool)(
    const easymock_params_of_em_func_bool*,
    void*);

void easymock_ignore_and_return_em_func_bool(
    easymock_return_type_of_em_func_bool _em_return_value);

void easymock_ignore_and_callback_em_func_bool(
    easymock_fn_callback_em_func_bool _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_bool(
    em_bool_t flag,
    easymock_return_type_of_em_func_bool _em_return_value);

void easymock_match_and_callback_em_func_bool(
    em_bool_t flag,
    easymock_fn_callback_em_func_bool _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_bool(
    easymock_fn_check_em_func_bool _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_bool _em_return_value);

void easymock_check_and_callback_em_func_bool(
    easymock_fn_check_em_func_bool _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_bool _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_bool(
    em_bool_t flag);
*/

//!
//! Mock for em_func_bool_const
//!

easymock_func* easymock_meta_of_em_func_bool_const(void);

typedef struct easymock_params_of_em_func_bool_const_tag {
    em_bool_t flag;
} easymock_params_of_em_func_bool_const;

typedef int easymock_return_type_of_em_func_bool_const;

typedef struct easymock_result_of_em_func_bool_const_tag {
    easymock_return_type_of_em_func_bool_const return_value;
} easymock_result_of_em_func_bool_const;

typedef int (*easymock_fn_callback_em_func_bool_const)(
    const easymock_params_of_em_func_bool_const*,
    void*);

typedef int (*easymock_fn_check_em_func_bool_const)(
    const easymock_params_of_em_func_bool_const*,
    void*);

void easymock_ignore_and_return_em_func_bool_const(
    easymock_return_type_of_em_func_bool_const _em_return_value);

void easymock_ignore_and_callback_em_func_bool_const(
    easymock_fn_callback_em_func_bool_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_bool_const(
    const em_bool_t flag,
    easymock_return_type_of_em_func_bool_const _em_return_value);

void easymock_match_and_callback_em_func_bool_const(
    const em_bool_t flag,
    easymock_fn_callback_em_func_bool_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_bool_const(
    easymock_fn_check_em_func_bool_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_bool_const _em_return_value);

void easymock_check_and_callback_em_func_bool_const(
    easymock_fn_check_em_func_bool_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_bool_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_bool_const(
    const em_bool_t flag);
*/

//!
//! Mock for em_func_bool_ptr
//!

easymock_func* easymock_meta_of_em_func_bool_ptr(void);

typedef struct easymock_params_of_em_func_bool_ptr_tag {
    em_bool_t* flag;
} easymock_params_of_em_func_bool_ptr;

typedef int easymock_return_type_of_em_func_bool_ptr;

typedef struct easymock_result_of_em_func_bool_ptr_tag {
    easymock_return_type_of_em_func_bool_ptr return_value;
} easymock_result_of_em_func_bool_ptr;

typedef int (*easymock_fn_callback_em_func_bool_ptr)(
    const easymock_params_of_em_func_bool_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_bool_ptr)(
    const easymock_params_of_em_func_bool_ptr*,
    void*);

void easymock_ignore_and_return_em_func_bool_ptr(
    easymock_return_type_of_em_func_bool_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_bool_ptr(
    easymock_fn_callback_em_func_bool_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_bool_ptr(
    em_bool_t* flag,
    easymock_return_type_of_em_func_bool_ptr _em_return_value);

void easymock_match_and_callback_em_func_bool_ptr(
    em_bool_t* flag,
    easymock_fn_callback_em_func_bool_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_bool_ptr(
    easymock_fn_check_em_func_bool_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_bool_ptr _em_return_value);

void easymock_check_and_callback_em_func_bool_ptr(
    easymock_fn_check_em_func_bool_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_bool_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_bool_ptr(
    em_bool_t* flag);
*/

//!
//! Mock for em_func_string
//!

easymock_func* easymock_meta_of_em_func_string(void);

typedef struct easymock_params_of_em_func_string_tag {
    em_string_t msg;
} easymock_params_of_em_func_string;

typedef int easymock_return_type_of_em_func_string;

typedef struct easymock_result_of_em_func_string_tag {
    easymock_return_type_of_em_func_string return_value;
} easymock_result_of_em_func_string;

typedef int (*easymock_fn_callback_em_func_string)(
    const easymock_params_of_em_func_string*,
    void*);

typedef int (*easymock_fn_check_em_func_string)(
    const easymock_params_of_em_func_string*,
    void*);

void easymock_ignore_and_return_em_func_string(
    easymock_return_type_of_em_func_string _em_return_value);

void easymock_ignore_and_callback_em_func_string(
    easymock_fn_callback_em_func_string _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_string(
    em_string_t msg,
    easymock_return_type_of_em_func_string _em_return_value);

void easymock_match_and_callback_em_func_string(
    em_string_t msg,
    easymock_fn_callback_em_func_string _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_string(
    easymock_fn_check_em_func_string _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_string _em_return_value);

void easymock_check_and_callback_em_func_string(
    easymock_fn_check_em_func_string _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_string _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_string(
    em_string_t msg);
*/

//!
//! Mock for em_func_string_const
//!

easymock_func* easymock_meta_of_em_func_string_const(void);

typedef struct easymock_params_of_em_func_string_const_tag {
    em_string_t msg;
} easymock_params_of_em_func_string_const;

typedef int easymock_return_type_of_em_func_string_const;

typedef struct easymock_result_of_em_func_string_const_tag {
    easymock_return_type_of_em_func_string_const return_value;
} easymock_result_of_em_func_string_const;

typedef int (*easymock_fn_callback_em_func_string_const)(
    const easymock_params_of_em_func_string_const*,
    void*);

typedef int (*easymock_fn_check_em_func_string_const)(
    const easymock_params_of_em_func_string_const*,
    void*);

void easymock_ignore_and_return_em_func_string_const(
    easymock_return_type_of_em_func_string_const _em_return_value);

void easymock_ignore_and_callback_em_func_string_const(
    easymock_fn_callback_em_func_string_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_string_const(
    const em_string_t msg,
    easymock_return_type_of_em_func_string_const _em_return_value);

void easymock_match_and_callback_em_func_string_const(
    const em_string_t msg,
    easymock_fn_callback_em_func_string_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_string_const(
    easymock_fn_check_em_func_string_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_string_const _em_return_value);

void easymock_check_and_callback_em_func_string_const(
    easymock_fn_check_em_func_string_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_string_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_string_const(
    const em_string_t msg);
*/

//!
//! Mock for em_func_string_ptr
//!

easymock_func* easymock_meta_of_em_func_string_ptr(void);

typedef struct easymock_params_of_em_func_string_ptr_tag {
    em_string_t* msg;
} easymock_params_of_em_func_string_ptr;

typedef int easymock_return_type_of_em_func_string_ptr;

typedef struct easymock_result_of_em_func_string_ptr_tag {
    easymock_return_type_of_em_func_string_ptr return_value;
} easymock_result_of_em_func_string_ptr;

typedef int (*easymock_fn_callback_em_func_string_ptr)(
    const easymock_params_of_em_func_string_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_string_ptr)(
    const easymock_params_of_em_func_string_ptr*,
    void*);

void easymock_ignore_and_return_em_func_string_ptr(
    easymock_return_type_of_em_func_string_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_string_ptr(
    easymock_fn_callback_em_func_string_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_string_ptr(
    em_string_t* msg,
    easymock_return_type_of_em_func_string_ptr _em_return_value);

void easymock_match_and_callback_em_func_string_ptr(
    em_string_t* msg,
    easymock_fn_callback_em_func_string_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_string_ptr(
    easymock_fn_check_em_func_string_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_string_ptr _em_return_value);

void easymock_check_and_callback_em_func_string_ptr(
    easymock_fn_check_em_func_string_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_string_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_string_ptr(
    em_string_t* msg);
*/

//!
//! Mock for em_func_conststring
//!

easymock_func* easymock_meta_of_em_func_conststring(void);

typedef struct easymock_params_of_em_func_conststring_tag {
    em_conststring_t msg;
} easymock_params_of_em_func_conststring;

typedef int easymock_return_type_of_em_func_conststring;

typedef struct easymock_result_of_em_func_conststring_tag {
    easymock_return_type_of_em_func_conststring return_value;
} easymock_result_of_em_func_conststring;

typedef int (*easymock_fn_callback_em_func_conststring)(
    const easymock_params_of_em_func_conststring*,
    void*);

typedef int (*easymock_fn_check_em_func_conststring)(
    const easymock_params_of_em_func_conststring*,
    void*);

void easymock_ignore_and_return_em_func_conststring(
    easymock_return_type_of_em_func_conststring _em_return_value);

void easymock_ignore_and_callback_em_func_conststring(
    easymock_fn_callback_em_func_conststring _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_conststring(
    em_conststring_t msg,
    easymock_return_type_of_em_func_conststring _em_return_value);

void easymock_match_and_callback_em_func_conststring(
    em_conststring_t msg,
    easymock_fn_callback_em_func_conststring _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_conststring(
    easymock_fn_check_em_func_conststring _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_conststring _em_return_value);

void easymock_check_and_callback_em_func_conststring(
    easymock_fn_check_em_func_conststring _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_conststring _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_conststring(
    em_conststring_t msg);
*/

//!
//! Mock for em_func_conststring_const
//!

easymock_func* easymock_meta_of_em_func_conststring_const(void);

typedef struct easymock_params_of_em_func_conststring_const_tag {
    em_conststring_t msg;
} easymock_params_of_em_func_conststring_const;

typedef int easymock_return_type_of_em_func_conststring_const;

typedef struct easymock_result_of_em_func_conststring_const_tag {
    easymock_return_type_of_em_func_conststring_const return_value;
} easymock_result_of_em_func_conststring_const;

typedef int (*easymock_fn_callback_em_func_conststring_const)(
    const easymock_params_of_em_func_conststring_const*,
    void*);

typedef int (*easymock_fn_check_em_func_conststring_const)(
    const easymock_params_of_em_func_conststring_const*,
    void*);

void easymock_ignore_and_return_em_func_conststring_const(
    easymock_return_type_of_em_func_conststring_const _em_return_value);

void easymock_ignore_and_callback_em_func_conststring_const(
    easymock_fn_callback_em_func_conststring_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_conststring_const(
    const em_conststring_t msg,
    easymock_return_type_of_em_func_conststring_const _em_return_value);

void easymock_match_and_callback_em_func_conststring_const(
    const em_conststring_t msg,
    easymock_fn_callback_em_func_conststring_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_conststring_const(
    easymock_fn_check_em_func_conststring_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_conststring_const _em_return_value);

void easymock_check_and_callback_em_func_conststring_const(
    easymock_fn_check_em_func_conststring_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_conststring_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_conststring_const(
    const em_conststring_t msg);
*/

//!
//! Mock for em_func_conststring_ptr
//!

easymock_func* easymock_meta_of_em_func_conststring_ptr(void);

typedef struct easymock_params_of_em_func_conststring_ptr_tag {
    em_conststring_t* msg;
} easymock_params_of_em_func_conststring_ptr;

typedef int easymock_return_type_of_em_func_conststring_ptr;

typedef struct easymock_result_of_em_func_conststring_ptr_tag {
    easymock_return_type_of_em_func_conststring_ptr return_value;
} easymock_result_of_em_func_conststring_ptr;

typedef int (*easymock_fn_callback_em_func_conststring_ptr)(
    const easymock_params_of_em_func_conststring_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_conststring_ptr)(
    const easymock_params_of_em_func_conststring_ptr*,
    void*);

void easymock_ignore_and_return_em_func_conststring_ptr(
    easymock_return_type_of_em_func_conststring_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_conststring_ptr(
    easymock_fn_callback_em_func_conststring_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_conststring_ptr(
    em_conststring_t* msg,
    easymock_return_type_of_em_func_conststring_ptr _em_return_value);

void easymock_match_and_callback_em_func_conststring_ptr(
    em_conststring_t* msg,
    easymock_fn_callback_em_func_conststring_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_conststring_ptr(
    easymock_fn_check_em_func_conststring_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_conststring_ptr _em_return_value);

void easymock_check_and_callback_em_func_conststring_ptr(
    easymock_fn_check_em_func_conststring_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_conststring_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_conststring_ptr(
    em_conststring_t* msg);
*/

//!
//! Mock for em_func_size
//!

easymock_func* easymock_meta_of_em_func_size(void);

typedef struct easymock_params_of_em_func_size_tag {
    em_size_t size;
} easymock_params_of_em_func_size;

typedef int easymock_return_type_of_em_func_size;

typedef struct easymock_result_of_em_func_size_tag {
    easymock_return_type_of_em_func_size return_value;
} easymock_result_of_em_func_size;

typedef int (*easymock_fn_callback_em_func_size)(
    const easymock_params_of_em_func_size*,
    void*);

typedef int (*easymock_fn_check_em_func_size)(
    const easymock_params_of_em_func_size*,
    void*);

void easymock_ignore_and_return_em_func_size(
    easymock_return_type_of_em_func_size _em_return_value);

void easymock_ignore_and_callback_em_func_size(
    easymock_fn_callback_em_func_size _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_size(
    em_size_t size,
    easymock_return_type_of_em_func_size _em_return_value);

void easymock_match_and_callback_em_func_size(
    em_size_t size,
    easymock_fn_callback_em_func_size _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_size(
    easymock_fn_check_em_func_size _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_size _em_return_value);

void easymock_check_and_callback_em_func_size(
    easymock_fn_check_em_func_size _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_size _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_size(
    em_size_t size);
*/

//!
//! Mock for em_func_size_const
//!

easymock_func* easymock_meta_of_em_func_size_const(void);

typedef struct easymock_params_of_em_func_size_const_tag {
    em_size_t size;
} easymock_params_of_em_func_size_const;

typedef int easymock_return_type_of_em_func_size_const;

typedef struct easymock_result_of_em_func_size_const_tag {
    easymock_return_type_of_em_func_size_const return_value;
} easymock_result_of_em_func_size_const;

typedef int (*easymock_fn_callback_em_func_size_const)(
    const easymock_params_of_em_func_size_const*,
    void*);

typedef int (*easymock_fn_check_em_func_size_const)(
    const easymock_params_of_em_func_size_const*,
    void*);

void easymock_ignore_and_return_em_func_size_const(
    easymock_return_type_of_em_func_size_const _em_return_value);

void easymock_ignore_and_callback_em_func_size_const(
    easymock_fn_callback_em_func_size_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_size_const(
    const em_size_t size,
    easymock_return_type_of_em_func_size_const _em_return_value);

void easymock_match_and_callback_em_func_size_const(
    const em_size_t size,
    easymock_fn_callback_em_func_size_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_size_const(
    easymock_fn_check_em_func_size_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_size_const _em_return_value);

void easymock_check_and_callback_em_func_size_const(
    easymock_fn_check_em_func_size_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_size_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_size_const(
    const em_size_t size);
*/

//!
//! Mock for em_func_size_ptr
//!

easymock_func* easymock_meta_of_em_func_size_ptr(void);

typedef struct easymock_params_of_em_func_size_ptr_tag {
    em_size_t* size;
} easymock_params_of_em_func_size_ptr;

typedef int easymock_return_type_of_em_func_size_ptr;

typedef struct easymock_result_of_em_func_size_ptr_tag {
    easymock_return_type_of_em_func_size_ptr return_value;
} easymock_result_of_em_func_size_ptr;

typedef int (*easymock_fn_callback_em_func_size_ptr)(
    const easymock_params_of_em_func_size_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_size_ptr)(
    const easymock_params_of_em_func_size_ptr*,
    void*);

void easymock_ignore_and_return_em_func_size_ptr(
    easymock_return_type_of_em_func_size_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_size_ptr(
    easymock_fn_callback_em_func_size_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_size_ptr(
    em_size_t* size,
    easymock_return_type_of_em_func_size_ptr _em_return_value);

void easymock_match_and_callback_em_func_size_ptr(
    em_size_t* size,
    easymock_fn_callback_em_func_size_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_size_ptr(
    easymock_fn_check_em_func_size_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_size_ptr _em_return_value);

void easymock_check_and_callback_em_func_size_ptr(
    easymock_fn_check_em_func_size_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_size_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_size_ptr(
    em_size_t* size);
*/

//!
//! Mock for em_func_pthread
//!

easymock_func* easymock_meta_of_em_func_pthread(void);

typedef struct easymock_params_of_em_func_pthread_tag {
    em_pthread_t tid;
} easymock_params_of_em_func_pthread;

typedef int easymock_return_type_of_em_func_pthread;

typedef struct easymock_result_of_em_func_pthread_tag {
    easymock_return_type_of_em_func_pthread return_value;
} easymock_result_of_em_func_pthread;

typedef int (*easymock_fn_callback_em_func_pthread)(
    const easymock_params_of_em_func_pthread*,
    void*);

typedef int (*easymock_fn_check_em_func_pthread)(
    const easymock_params_of_em_func_pthread*,
    void*);

void easymock_ignore_and_return_em_func_pthread(
    easymock_return_type_of_em_func_pthread _em_return_value);

void easymock_ignore_and_callback_em_func_pthread(
    easymock_fn_callback_em_func_pthread _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_pthread(
    em_pthread_t tid,
    easymock_return_type_of_em_func_pthread _em_return_value);

void easymock_match_and_callback_em_func_pthread(
    em_pthread_t tid,
    easymock_fn_callback_em_func_pthread _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_pthread(
    easymock_fn_check_em_func_pthread _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_pthread _em_return_value);

void easymock_check_and_callback_em_func_pthread(
    easymock_fn_check_em_func_pthread _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_pthread _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_pthread(
    em_pthread_t tid);
*/

//!
//! Mock for em_func_pthread_const
//!

easymock_func* easymock_meta_of_em_func_pthread_const(void);

typedef struct easymock_params_of_em_func_pthread_const_tag {
    em_pthread_t tid;
} easymock_params_of_em_func_pthread_const;

typedef int easymock_return_type_of_em_func_pthread_const;

typedef struct easymock_result_of_em_func_pthread_const_tag {
    easymock_return_type_of_em_func_pthread_const return_value;
} easymock_result_of_em_func_pthread_const;

typedef int (*easymock_fn_callback_em_func_pthread_const)(
    const easymock_params_of_em_func_pthread_const*,
    void*);

typedef int (*easymock_fn_check_em_func_pthread_const)(
    const easymock_params_of_em_func_pthread_const*,
    void*);

void easymock_ignore_and_return_em_func_pthread_const(
    easymock_return_type_of_em_func_pthread_const _em_return_value);

void easymock_ignore_and_callback_em_func_pthread_const(
    easymock_fn_callback_em_func_pthread_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_pthread_const(
    const em_pthread_t tid,
    easymock_return_type_of_em_func_pthread_const _em_return_value);

void easymock_match_and_callback_em_func_pthread_const(
    const em_pthread_t tid,
    easymock_fn_callback_em_func_pthread_const _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_pthread_const(
    easymock_fn_check_em_func_pthread_const _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_pthread_const _em_return_value);

void easymock_check_and_callback_em_func_pthread_const(
    easymock_fn_check_em_func_pthread_const _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_pthread_const _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_pthread_const(
    const em_pthread_t tid);
*/

//!
//! Mock for em_func_pthread_ptr
//!

easymock_func* easymock_meta_of_em_func_pthread_ptr(void);

typedef struct easymock_params_of_em_func_pthread_ptr_tag {
    em_pthread_t* tid;
} easymock_params_of_em_func_pthread_ptr;

typedef int easymock_return_type_of_em_func_pthread_ptr;

typedef struct easymock_result_of_em_func_pthread_ptr_tag {
    easymock_return_type_of_em_func_pthread_ptr return_value;
} easymock_result_of_em_func_pthread_ptr;

typedef int (*easymock_fn_callback_em_func_pthread_ptr)(
    const easymock_params_of_em_func_pthread_ptr*,
    void*);

typedef int (*easymock_fn_check_em_func_pthread_ptr)(
    const easymock_params_of_em_func_pthread_ptr*,
    void*);

void easymock_ignore_and_return_em_func_pthread_ptr(
    easymock_return_type_of_em_func_pthread_ptr _em_return_value);

void easymock_ignore_and_callback_em_func_pthread_ptr(
    easymock_fn_callback_em_func_pthread_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_func_pthread_ptr(
    em_pthread_t* tid,
    easymock_return_type_of_em_func_pthread_ptr _em_return_value);

void easymock_match_and_callback_em_func_pthread_ptr(
    em_pthread_t* tid,
    easymock_fn_callback_em_func_pthread_ptr _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_func_pthread_ptr(
    easymock_fn_check_em_func_pthread_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_func_pthread_ptr _em_return_value);

void easymock_check_and_callback_em_func_pthread_ptr(
    easymock_fn_check_em_func_pthread_ptr _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_func_pthread_ptr _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
int em_func_pthread_ptr(
    em_pthread_t* tid);
*/

//!
//! Mock for em_typer_func_type1
//!

easymock_func* easymock_meta_of_em_typer_func_type1(void);

typedef struct easymock_params_of_em_typer_func_type1_tag {
    int param1;
} easymock_params_of_em_typer_func_type1;

typedef unsigned short easymock_return_type_of_em_typer_func_type1;

typedef struct easymock_result_of_em_typer_func_type1_tag {
    easymock_return_type_of_em_typer_func_type1 return_value;
} easymock_result_of_em_typer_func_type1;

typedef unsigned short (*easymock_fn_callback_em_typer_func_type1)(
    const easymock_params_of_em_typer_func_type1*,
    void*);

typedef int (*easymock_fn_check_em_typer_func_type1)(
    const easymock_params_of_em_typer_func_type1*,
    void*);

void easymock_ignore_and_return_em_typer_func_type1(
    easymock_return_type_of_em_typer_func_type1 _em_return_value);

void easymock_ignore_and_callback_em_typer_func_type1(
    easymock_fn_callback_em_typer_func_type1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_typer_func_type1(
    int param1,
    easymock_return_type_of_em_typer_func_type1 _em_return_value);

void easymock_match_and_callback_em_typer_func_type1(
    int param1,
    easymock_fn_callback_em_typer_func_type1 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_typer_func_type1(
    easymock_fn_check_em_typer_func_type1 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_typer_func_type1 _em_return_value);

void easymock_check_and_callback_em_typer_func_type1(
    easymock_fn_check_em_typer_func_type1 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_typer_func_type1 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
unsigned short em_typer_func_type1(
    int param1);
*/

//!
//! Mock for em_typer_func_type12
//!

easymock_func* easymock_meta_of_em_typer_func_type12(void);

typedef struct easymock_params_of_em_typer_func_type12_tag {
    int param1;
    char* param2;
} easymock_params_of_em_typer_func_type12;

typedef unsigned short easymock_return_type_of_em_typer_func_type12;

typedef struct easymock_result_of_em_typer_func_type12_tag {
    easymock_return_type_of_em_typer_func_type12 return_value;
} easymock_result_of_em_typer_func_type12;

typedef unsigned short (*easymock_fn_callback_em_typer_func_type12)(
    const easymock_params_of_em_typer_func_type12*,
    void*);

typedef int (*easymock_fn_check_em_typer_func_type12)(
    const easymock_params_of_em_typer_func_type12*,
    void*);

void easymock_ignore_and_return_em_typer_func_type12(
    easymock_return_type_of_em_typer_func_type12 _em_return_value);

void easymock_ignore_and_callback_em_typer_func_type12(
    easymock_fn_callback_em_typer_func_type12 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_typer_func_type12(
    int param1,
    char* param2,
    easymock_return_type_of_em_typer_func_type12 _em_return_value);

void easymock_match_and_callback_em_typer_func_type12(
    int param1,
    char* param2,
    easymock_fn_callback_em_typer_func_type12 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_typer_func_type12(
    easymock_fn_check_em_typer_func_type12 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_typer_func_type12 _em_return_value);

void easymock_check_and_callback_em_typer_func_type12(
    easymock_fn_check_em_typer_func_type12 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_typer_func_type12 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
unsigned short em_typer_func_type12(
    int param1,
    char* param2);
*/

//!
//! Mock for em_typer_func_type123
//!

easymock_func* easymock_meta_of_em_typer_func_type123(void);

typedef struct easymock_params_of_em_typer_func_type123_tag {
    int param1;
    char* param2;
    const char* param3;
} easymock_params_of_em_typer_func_type123;

typedef unsigned short easymock_return_type_of_em_typer_func_type123;

typedef struct easymock_result_of_em_typer_func_type123_tag {
    easymock_return_type_of_em_typer_func_type123 return_value;
} easymock_result_of_em_typer_func_type123;

typedef unsigned short (*easymock_fn_callback_em_typer_func_type123)(
    const easymock_params_of_em_typer_func_type123*,
    void*);

typedef int (*easymock_fn_check_em_typer_func_type123)(
    const easymock_params_of_em_typer_func_type123*,
    void*);

void easymock_ignore_and_return_em_typer_func_type123(
    easymock_return_type_of_em_typer_func_type123 _em_return_value);

void easymock_ignore_and_callback_em_typer_func_type123(
    easymock_fn_callback_em_typer_func_type123 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_typer_func_type123(
    int param1,
    char* param2,
    const char* param3,
    easymock_return_type_of_em_typer_func_type123 _em_return_value);

void easymock_match_and_callback_em_typer_func_type123(
    int param1,
    char* param2,
    const char* param3,
    easymock_fn_callback_em_typer_func_type123 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_typer_func_type123(
    easymock_fn_check_em_typer_func_type123 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_typer_func_type123 _em_return_value);

void easymock_check_and_callback_em_typer_func_type123(
    easymock_fn_check_em_typer_func_type123 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_typer_func_type123 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
unsigned short em_typer_func_type123(
    int param1,
    char* param2,
    const char* param3);
*/

//!
//! Mock for em_typer_func_type1234
//!

easymock_func* easymock_meta_of_em_typer_func_type1234(void);

typedef struct easymock_params_of_em_typer_func_type1234_tag {
    int param1;
    char* param2;
    const char* param3;
    char* param4;
} easymock_params_of_em_typer_func_type1234;

typedef unsigned short easymock_return_type_of_em_typer_func_type1234;

typedef struct easymock_result_of_em_typer_func_type1234_tag {
    easymock_return_type_of_em_typer_func_type1234 return_value;
} easymock_result_of_em_typer_func_type1234;

typedef unsigned short (*easymock_fn_callback_em_typer_func_type1234)(
    const easymock_params_of_em_typer_func_type1234*,
    void*);

typedef int (*easymock_fn_check_em_typer_func_type1234)(
    const easymock_params_of_em_typer_func_type1234*,
    void*);

void easymock_ignore_and_return_em_typer_func_type1234(
    easymock_return_type_of_em_typer_func_type1234 _em_return_value);

void easymock_ignore_and_callback_em_typer_func_type1234(
    easymock_fn_callback_em_typer_func_type1234 _em_fn_callback,
    void* _em_arg_cb);

void easymock_match_and_return_em_typer_func_type1234(
    int param1,
    char* param2,
    const char* param3,
    char* const param4,
    easymock_return_type_of_em_typer_func_type1234 _em_return_value);

void easymock_match_and_callback_em_typer_func_type1234(
    int param1,
    char* param2,
    const char* param3,
    char* const param4,
    easymock_fn_callback_em_typer_func_type1234 _em_fn_callback,
    void* _em_arg_cb);

void easymock_check_and_return_em_typer_func_type1234(
    easymock_fn_check_em_typer_func_type1234 _em_fn_check,
    void* _em_arg_ch,
    easymock_return_type_of_em_typer_func_type1234 _em_return_value);

void easymock_check_and_callback_em_typer_func_type1234(
    easymock_fn_check_em_typer_func_type1234 _em_fn_check,
    void* _em_arg_ch,
    easymock_fn_callback_em_typer_func_type1234 _em_fn_callback,
    void* _em_arg_cb);

/* Original function declaration:
unsigned short em_typer_func_type1234(
    int param1,
    char* param2,
    const char* param3,
    char* const param4);
*/

#endif
